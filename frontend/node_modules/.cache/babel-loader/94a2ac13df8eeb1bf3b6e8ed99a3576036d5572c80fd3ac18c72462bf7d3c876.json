{"ast":null,"code":"// API utility functions for Me-API Playground\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:8000\";\nclass ApiError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.name = \"ApiError\";\n    this.status = status;\n  }\n}\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n    try {\n      const errorJson = JSON.parse(errorText);\n      errorMessage = errorJson.detail || errorMessage;\n    } catch {\n      // If not JSON, use the text as is\n      errorMessage = errorText || errorMessage;\n    }\n    throw new ApiError(errorMessage, response.status);\n  }\n  return response.json();\n};\nexport const api = {\n  // Health check\n  health: async () => {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return handleResponse(response);\n  },\n  // Profile operations\n  getProfile: async () => {\n    const response = await fetch(`${API_BASE_URL}/profile`);\n    return handleResponse(response);\n  },\n  createProfile: async profileData => {\n    const response = await fetch(`${API_BASE_URL}/profile`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(profileData)\n    });\n    return handleResponse(response);\n  },\n  updateProfile: async profileData => {\n    const response = await fetch(`${API_BASE_URL}/profile`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(profileData)\n    });\n    return handleResponse(response);\n  },\n  // Projects operations\n  getProjects: async (skill = null) => {\n    const url = skill ? `${API_BASE_URL}/projects?skill=${encodeURIComponent(skill)}` : `${API_BASE_URL}/projects`;\n    const response = await fetch(url);\n    return handleResponse(response);\n  },\n  // Skills operations\n  getTopSkills: async () => {\n    const response = await fetch(`${API_BASE_URL}/skills/top`);\n    return handleResponse(response);\n  },\n  // Search operations\n  search: async query => {\n    const response = await fetch(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\n    return handleResponse(response);\n  }\n};\nexport { ApiError };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiError","Error","constructor","message","status","name","handleResponse","response","ok","errorText","text","errorMessage","statusText","errorJson","JSON","parse","detail","json","api","health","fetch","getProfile","createProfile","profileData","method","headers","body","stringify","updateProfile","getProjects","skill","url","encodeURIComponent","getTopSkills","search","query"],"sources":["/Users/rajnishpalsingh/Documents/me-api-playground/frontend/src/utils/api.js"],"sourcesContent":["// API utility functions for Me-API Playground\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:8000\"\n\nclass ApiError extends Error {\n  constructor(message, status) {\n    super(message)\n    this.name = \"ApiError\"\n    this.status = status\n  }\n}\n\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const errorText = await response.text()\n    let errorMessage = `HTTP ${response.status}: ${response.statusText}`\n\n    try {\n      const errorJson = JSON.parse(errorText)\n      errorMessage = errorJson.detail || errorMessage\n    } catch {\n      // If not JSON, use the text as is\n      errorMessage = errorText || errorMessage\n    }\n\n    throw new ApiError(errorMessage, response.status)\n  }\n\n  return response.json()\n}\n\nexport const api = {\n  // Health check\n  health: async () => {\n    const response = await fetch(`${API_BASE_URL}/health`)\n    return handleResponse(response)\n  },\n\n  // Profile operations\n  getProfile: async () => {\n    const response = await fetch(`${API_BASE_URL}/profile`)\n    return handleResponse(response)\n  },\n\n  createProfile: async (profileData) => {\n    const response = await fetch(`${API_BASE_URL}/profile`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(profileData),\n    })\n    return handleResponse(response)\n  },\n\n  updateProfile: async (profileData) => {\n    const response = await fetch(`${API_BASE_URL}/profile`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(profileData),\n    })\n    return handleResponse(response)\n  },\n\n  // Projects operations\n  getProjects: async (skill = null) => {\n    const url = skill ? `${API_BASE_URL}/projects?skill=${encodeURIComponent(skill)}` : `${API_BASE_URL}/projects`\n\n    const response = await fetch(url)\n    return handleResponse(response)\n  },\n\n  // Skills operations\n  getTopSkills: async () => {\n    const response = await fetch(`${API_BASE_URL}/skills/top`)\n    return handleResponse(response)\n  },\n\n  // Search operations\n  search: async (query) => {\n    const response = await fetch(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`)\n    return handleResponse(response)\n  },\n}\n\nexport { ApiError }\n"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,QAAQ,SAASC,KAAK,CAAC;EAC3BC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC3B,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACE,IAAI,GAAG,UAAU;IACtB,IAAI,CAACD,MAAM,GAAGA,MAAM;EACtB;AACF;AAEA,MAAME,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,IAAIC,YAAY,GAAG,QAAQJ,QAAQ,CAACH,MAAM,KAAKG,QAAQ,CAACK,UAAU,EAAE;IAEpE,IAAI;MACF,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACN,SAAS,CAAC;MACvCE,YAAY,GAAGE,SAAS,CAACG,MAAM,IAAIL,YAAY;IACjD,CAAC,CAAC,MAAM;MACN;MACAA,YAAY,GAAGF,SAAS,IAAIE,YAAY;IAC1C;IAEA,MAAM,IAAIX,QAAQ,CAACW,YAAY,EAAEJ,QAAQ,CAACH,MAAM,CAAC;EACnD;EAEA,OAAOG,QAAQ,CAACU,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,GAAG,GAAG;EACjB;EACAC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,MAAMZ,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGxB,YAAY,SAAS,CAAC;IACtD,OAAOU,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAED;EACAc,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,MAAMd,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGxB,YAAY,UAAU,CAAC;IACvD,OAAOU,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAEDe,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,MAAMhB,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGxB,YAAY,UAAU,EAAE;MACtD4B,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEZ,IAAI,CAACa,SAAS,CAACJ,WAAW;IAClC,CAAC,CAAC;IACF,OAAOjB,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAEDqB,aAAa,EAAE,MAAOL,WAAW,IAAK;IACpC,MAAMhB,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGxB,YAAY,UAAU,EAAE;MACtD4B,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEZ,IAAI,CAACa,SAAS,CAACJ,WAAW;IAClC,CAAC,CAAC;IACF,OAAOjB,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAED;EACAsB,WAAW,EAAE,MAAAA,CAAOC,KAAK,GAAG,IAAI,KAAK;IACnC,MAAMC,GAAG,GAAGD,KAAK,GAAG,GAAGlC,YAAY,mBAAmBoC,kBAAkB,CAACF,KAAK,CAAC,EAAE,GAAG,GAAGlC,YAAY,WAAW;IAE9G,MAAMW,QAAQ,GAAG,MAAMa,KAAK,CAACW,GAAG,CAAC;IACjC,OAAOzB,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAED;EACA0B,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAM1B,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGxB,YAAY,aAAa,CAAC;IAC1D,OAAOU,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAED;EACA2B,MAAM,EAAE,MAAOC,KAAK,IAAK;IACvB,MAAM5B,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAGxB,YAAY,aAAaoC,kBAAkB,CAACG,KAAK,CAAC,EAAE,CAAC;IACrF,OAAO7B,cAAc,CAACC,QAAQ,CAAC;EACjC;AACF,CAAC;AAED,SAASP,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}